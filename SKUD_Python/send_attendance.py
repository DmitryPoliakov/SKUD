#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json
from datetime import datetime

# –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
EMPLOYEES = {
    "E9DBA5A3": "–®—É—Ä–∞",
    "992BEE97": "–ü–æ–ª—è–∫–æ–≤ –ü–∞–≤–µ–ª", 
    "894046B8": "–¢–∞—Ä–∞—Å–æ–≤ –ù–∏–∫–∏—Ç–∞",
    "92C2001D": "–ü–æ–ª—è–∫–æ–≤ –î–º–∏—Ç—Ä–∏–π",
    "296DD1A3": "–ü—É—â–∏–Ω—Å–∫–∏–π –ú–∞—Ä–∫",
    "32AABBD6": "–ü–æ–ª—è–∫–æ–≤ –ü–∞–≤–µ–ª (–∫–∞—Ä—Ç–∞ 2)",
    "E79DF8A4": "–ö–∞—Ä—Ç–∞ –ú–ò–† 4635",
    "0A711B71": "–ö–∞—Ä—Ç–∞ –ü—Ä–æ–∫–∞—Ç—É—Ç", 
    "083BD5D8": "–¶–£–ú"
}

SERVER_URL = "https://skud-ek.ru/api/attendance"

def send_attendance(serial, time_str=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    
    Args:
        serial (str): –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
        time_str (str): –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:SS (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    
    if time_str is None:
        time_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    employee_name = EMPLOYEES.get(serial, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    
    data = {
        "serial": serial,
        "time": time_str
    }
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee_name}")
    print(f"   –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {serial}")
    print(f"   –í—Ä–µ–º—è: {time_str}")
    print(f"   URL: {SERVER_URL}")
    print()
    
    try:
        response = requests.post(
            SERVER_URL, 
            json=data, 
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get('status') == 'success':
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ!")
                print(f"   –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {result.get('employee')}")
                print(f"   –°–æ–±—ã—Ç–∏–µ: {result.get('event')}")
                print(f"   –í—Ä–µ–º—è: {result.get('time')}")
                print(f"   –î–∞—Ç–∞: {result.get('date')}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {result.get('message')}")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

def main():
    print("üîë –°–ö–£–î - –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    print("\nüë• –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:")
    for i, (serial, name) in enumerate(EMPLOYEES.items(), 1):
        print(f"   {i}. {name} ({serial})")
    
    print(f"\n   {len(EMPLOYEES) + 1}. –í–≤–µ—Å—Ç–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é")
    print()
    
    try:
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–Ω–æ–º–µ—Ä): ").strip()
        
        if choice.isdigit():
            choice_num = int(choice)
            if 1 <= choice_num <= len(EMPLOYEES):
                serial = list(EMPLOYEES.keys())[choice_num - 1]
            elif choice_num == len(EMPLOYEES) + 1:
                serial = input("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ").strip().upper()
                if not serial:
                    print("‚ùå –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    return
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                return
        else:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä")
            return
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
        time_choice = input("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è? (y/n): ").strip().lower()
        
        if time_choice in ['y', 'yes', '–¥–∞', '']:
            time_str = None
        else:
            time_str = input("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (YYYY-MM-DD HH:MM:SS): ").strip()
            if not time_str:
                time_str = None
        
        print()
        send_attendance(serial, time_str)
        
    except KeyboardInterrupt:
        print("\n\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 