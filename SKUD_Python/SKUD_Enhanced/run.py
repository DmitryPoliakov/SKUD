#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –°–ö–£–î Enhanced
–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask API, Telegram –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
"""

import asyncio
import signal
import sys
from concurrent.futures import ThreadPoolExecutor
from threading import Thread
from datetime import datetime
from loguru import logger

from app.config import config
from app.database import init_database, create_initial_data
from app.telegram_bot import start_bot, stop_bot
from app.main import create_app
from app.services.attendance import AttendanceService


class SKUDSystem:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã –°–ö–£–î Enhanced"""
    
    def __init__(self):
        self.flask_app = None
        self.flask_thread = None
        self.bot_task = None
        self.scheduler_task = None
        self.executor = ThreadPoolExecutor(max_workers=3)
        self.running = False
        
        # –°–µ—Ä–≤–∏—Å—ã
        self.attendance_service = AttendanceService()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        asyncio.create_task(self.stop())
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –°–ö–£–î Enhanced...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if not config.validate():
                raise Exception("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            init_database()
            create_initial_data()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            logger.info("üåê –ó–∞–ø—É—Å–∫ Flask API...")
            await self._start_flask()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            self.bot_task = asyncio.create_task(start_bot())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            logger.info("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")
            self.scheduler_task = asyncio.create_task(self._run_scheduler())
            
            self.running = True
            logger.success("‚úÖ –°–∏—Å—Ç–µ–º–∞ –°–ö–£–î Enhanced —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
            self._print_system_info()
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                await asyncio.gather(
                    self.bot_task,
                    self.scheduler_task,
                    return_exceptions=True
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            await self.stop()
            raise
    
    async def _start_flask(self):
        """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.flask_app = create_app()
            
            def run_flask():
                self.flask_app.run(
                    host=config.FLASK_HOST,
                    port=config.FLASK_PORT,
                    debug=False,  # –û—Ç–∫–ª—é—á–∞–µ–º debug –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
                    use_reloader=False,
                    threaded=True
                )
            
            self.flask_thread = Thread(target=run_flask, daemon=True)
            self.flask_thread.start()
            
            # –î–∞–µ–º –≤—Ä–µ–º—è Flask –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            await asyncio.sleep(2)
            
            logger.success(f"Flask API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{config.FLASK_HOST}:{config.FLASK_PORT}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flask: {e}")
            raise
    
    async def _run_scheduler(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        try:
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
            
            last_auto_close_date = None
            last_cleanup_hour = None
            
            while self.running:
                try:
                    now = datetime.now()
                    
                    # –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –¥–Ω–µ–π –≤ 00:01
                    if (config.AUTO_CLOSE_ENABLED and 
                        now.hour == 0 and now.minute <= 5 and 
                        now.strftime('%Y-%m-%d') != last_auto_close_date):
                        
                        logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –¥–Ω–µ–π...")
                        
                        from app.database import get_db
                        with next(get_db()) as db:
                            closed_count = await self.attendance_service.auto_close_day(db)
                            if closed_count > 0:
                                logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ {closed_count} –¥–Ω–µ–π")
                        
                        last_auto_close_date = now.strftime('%Y-%m-%d')
                    
                    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
                    if now.minute == 0 and now.hour != last_cleanup_hour:
                        logger.info("–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
                        
                        from app.services.registration import RegistrationService
                        from app.database import get_db
                        
                        reg_service = RegistrationService()
                        with next(get_db()) as db:
                            cleaned_count = await reg_service.cleanup_expired_requests(db)
                            if cleaned_count > 0:
                                logger.info(f"–û—á–∏—â–µ–Ω–æ {cleaned_count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
                        
                        last_cleanup_hour = now.hour
                    
                    # –°–ø–∏–º 30 —Å–µ–∫—É–Ω–¥
                    await asyncio.sleep(30)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                    await asyncio.sleep(60)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            
        except asyncio.CancelledError:
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    def _print_system_info(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ"""
        print("\n" + "="*60)
        print("üìã –°–ò–°–¢–ï–ú–ê –°–ö–£–î ENHANCED –ó–ê–ü–£–©–ï–ù–ê")
        print("="*60)
        print(f"üåê Web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://{config.FLASK_HOST}:{config.FLASK_PORT}")
        print(f"ü§ñ Telegram –±–æ—Ç: {'–ê–∫—Ç–∏–≤–µ–Ω' if config.TELEGRAM_BOT_TOKEN else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        print(f"üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {config.TELEGRAM_ADMIN_ID if config.TELEGRAM_ADMIN_ID else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        print(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.DATABASE_URL}")
        print(f"üìÅ –î–∞–Ω–Ω—ã–µ: {config.DATA_DIR}")
        print(f"üìä –û—Ç—á–µ—Ç—ã: {config.REPORTS_DIR}")
        print(f"üìù –õ–æ–≥–∏: {config.LOGS_DIR}")
        print("="*60)
        print("üîÑ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üì± –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("="*60 + "\n")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        if not self.running:
            return
        
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –°–ö–£–î Enhanced...")
        self.running = False
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
            if self.bot_task and not self.bot_task.done():
                logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
                await stop_bot()
                self.bot_task.cancel()
                try:
                    await self.bot_task
                except asyncio.CancelledError:
                    pass
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            if self.scheduler_task and not self.scheduler_task.done():
                logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
                self.scheduler_task.cancel()
                try:
                    await self.scheduler_task
                except asyncio.CancelledError:
                    pass
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Flask (–æ–Ω –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ)
            if self.flask_thread and self.flask_thread.is_alive():
                logger.info("Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É...")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º executor
            self.executor.shutdown(wait=True)
            
            logger.success("‚úÖ –°–∏—Å—Ç–µ–º–∞ –°–ö–£–î Enhanced –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º—ã: {e}")


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

def init_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –∑–∞–ø—É—Å–∫–∞"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –°–ö–£–î Enhanced...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not config.validate():
            logger.error("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_database()
        create_initial_data()
        
        logger.success("–°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False


def run_flask_only():
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Flask API...")
        
        if not init_system():
            return
        
        app = create_app()
        logger.success(f"Flask API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{config.FLASK_HOST}:{config.FLASK_PORT}")
        
        app.run(
            host=config.FLASK_HOST,
            port=config.FLASK_PORT,
            debug=config.FLASK_DEBUG
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flask: {e}")


def run_bot_only():
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞...")
        
        if not init_system():
            return
        
        asyncio.run(start_bot())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    system = SKUDSystem()
    try:
        await system.start()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await system.stop()


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∫–æ–Ω—Å–æ–ª—å
    logger.add(
        sys.stderr,
        level=config.LOG_LEVEL,
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
        colorize=True
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Ñ–∞–π–ª
    logger.add(
        config.LOG_FILE,
        level=config.LOG_LEVEL,
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
        rotation="10 MB",
        retention="30 days",
        compression="zip"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "init":
            init_system()
        elif command == "flask":
            run_flask_only()
        elif command == "bot":
            run_bot_only()
        elif command == "help":
            print("""
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python run.py [–∫–æ–º–∞–Ω–¥–∞]

–ö–æ–º–∞–Ω–¥—ã:
  (–ø—É—Å—Ç–æ)  - –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã (Flask + Telegram –±–æ—Ç + –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫)
  init     - –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  flask    - –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Flask API
  bot      - –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞
  help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  python run.py          # –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫
  python run.py flask    # –¢–æ–ª—å–∫–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
  python run.py bot      # –¢–æ–ª—å–∫–æ –±–æ—Ç
            """)
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'python run.py help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
    else:
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
        try:
            asyncio.run(main())
        except KeyboardInterrupt:
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            sys.exit(1) 