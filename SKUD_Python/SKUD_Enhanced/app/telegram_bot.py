#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Telegram –±–æ—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –°–ö–£–î Enhanced –Ω–∞ Aiogram 3.x
"""

import asyncio
import json
import secrets
from datetime import datetime, timedelta
from typing import Optional, List

from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    WebAppInfo, InputFile, FSInputFile
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger
from sqlalchemy.orm import Session

from .config import config
from .database import get_db, db_manager
from .models import (
    Employee, RFIDCard, AttendanceEvent, RegistrationRequest,
    UserRole, EventType, get_card_by_serial, create_attendance_event
)
from .services.reports import ReportService
from .services.registration import RegistrationService
from .services.notifications import NotificationService


class RegistrationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    waiting_for_name = State()
    waiting_for_confirmation = State()


class AddEmployeeStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    waiting_for_card_serial = State()
    waiting_for_name = State()
    waiting_for_telegram_id = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=config.TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏ —Ä–æ—É—Ç–µ—Ä
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# –°–µ—Ä–≤–∏—Å—ã
report_service = ReportService()
registration_service = RegistrationService()
notification_service = NotificationService(bot)


def get_user_role(telegram_id: str, db: Session) -> UserRole:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    employee = db.query(Employee).filter(Employee.telegram_id == telegram_id).first()
    if employee:
        return employee.role
    return UserRole.EMPLOYEE


def is_admin(telegram_id: str, db: Session) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return get_user_role(telegram_id, db) == UserRole.ADMIN


def create_main_menu(is_admin_user: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    
    # –û—Ç—á–µ—Ç—ã
    builder.row(
        InlineKeyboardButton(
            text="üìä –û—Ç—á–µ—Ç—ã", 
            callback_data="menu_reports"
        )
    )
    
    # –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if config.WEBAPP_URL:
        builder.row(
            InlineKeyboardButton(
                text="üåê Web App", 
                web_app=WebAppInfo(url=config.WEBAPP_URL)
            )
        )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    builder.row(
        InlineKeyboardButton(
            text="üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
            callback_data="menu_settings"
        )
    )
    
    if is_admin_user:
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        builder.row(
            InlineKeyboardButton(
                text="üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", 
                callback_data="menu_employees"
            ),
            InlineKeyboardButton(
                text="üí≥ –ö–∞—Ä—Ç—ã", 
                callback_data="menu_cards"
            )
        )
        
        builder.row(
            InlineKeyboardButton(
                text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                callback_data="menu_stats"
            ),
            InlineKeyboardButton(
                text="‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", 
                callback_data="menu_system"
            )
        )
    
    return builder.as_markup()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    telegram_id = str(message.from_user.id)
    
    with next(get_db()) as db:
        employee = db.query(Employee).filter(Employee.telegram_id == telegram_id).first()
        is_admin_user = employee and employee.is_admin if employee else False
        
        if not employee:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –°–ö–£–î Enhanced!\n\n"
                "üîç –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É "
                "–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º",
                        callback_data="contact_admin"
                    )
                ]])
            )
            return
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{employee.name}</b>!\n\n"
        
        if is_admin_user:
            welcome_text += "üîß –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã.\n"
        
        welcome_text += (
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
            "‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏\n"
            "‚Ä¢ üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∏—Å—Ç–µ–º—ã\n"
        )
        
        if is_admin_user:
            welcome_text += (
                "\nüîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                "‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏\n"
                "‚Ä¢ üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∞–º–∏\n"
                "‚Ä¢ üìà –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            )
        
        await message.answer(
            welcome_text,
            reply_markup=create_main_menu(is_admin_user)
        )


@router.message(Command("add_employee"))
async def cmd_add_employee(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    telegram_id = str(message.from_user.id)
    
    with next(get_db()) as db:
        if not is_admin(telegram_id, db):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        args = message.text.split()[1:]  # –£–±–∏—Ä–∞–µ–º /add_employee
        
        if len(args) >= 2:
            # –§–æ—Ä–º–∞—Ç: /add_employee SERIAL_NUMBER Name
            serial = args[0].upper()
            name = " ".join(args[1:])
            
            await add_employee_with_card(message, db, serial, name)
        else:
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
            await message.answer(
                "üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_operation")
                ]])
            )
            await state.set_state(AddEmployeeStates.waiting_for_card_serial)


async def add_employee_with_card(message: Message, db: Session, serial: str, name: str, telegram_id: str = None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –∫–∞—Ä—Ç–æ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ä—Ç–∞
        existing_card = get_card_by_serial(db, serial)
        if existing_card:
            await message.answer(
                f"‚ùå –ö–∞—Ä—Ç–∞ {serial} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: "
                f"{existing_card.employee.name if existing_card.employee else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee = Employee(
            name=name,
            telegram_id=telegram_id,
            role=UserRole.EMPLOYEE,
            notifications_enabled=True,
            arrival_notifications=True,
            departure_notifications=True
        )
        db.add(employee)
        db.flush()
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
        card = RFIDCard(
            serial_number=serial,
            employee_id=employee.id,
            card_type="MIFARE",
            description=f"–ö–∞—Ä—Ç–∞ –¥–ª—è {name}"
        )
        db.add(card)
        db.commit()
        
        success_text = f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        success_text += f"üë§ –ò–º—è: <b>{name}</b>\n"
        success_text += f"üí≥ –ö–∞—Ä—Ç–∞: <code>{serial}</code>\n"
        
        if telegram_id:
            success_text += f"üì± Telegram ID: <code>{telegram_id}</code>\n"
        
        await message.answer(success_text)
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {name} —Å –∫–∞—Ä—Ç–æ–π {serial}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")


@router.message(Command("report"))
async def cmd_report(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    await show_reports_menu(message)


@router.callback_query(F.data == "menu_reports")
async def show_reports_menu(message_or_query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ - —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback
    if isinstance(message_or_query, CallbackQuery):
        query = message_or_query
        message = query.message
        await query.answer()
    else:
        message = message_or_query
        query = None
    
    now = datetime.now()
    current_month = now.month
    current_year = now.year
    
    # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    prev_month = current_month - 1
    prev_year = current_year
    if prev_month == 0:
        prev_month = 12
        prev_year -= 1
    
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    builder.row(
        InlineKeyboardButton(
            text=f"üìä –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü ({now.strftime('%B')})",
            callback_data=f"report_{current_year}_{current_month}"
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text=f"üìä –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü",
            callback_data=f"report_{prev_year}_{prev_month}"
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é",
            callback_data="report_week"
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="main_menu"
        )
    )
    
    text = "üìä <b>–û—Ç—á–µ—Ç—ã –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:"
    
    if query:
        await message.edit_text(text, reply_markup=builder.as_markup())
    else:
        await message.answer(text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("report_"))
async def handle_report_request(query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞"""
    await query.answer()
    
    data_parts = query.data.split("_")
    
    if len(data_parts) == 3 and data_parts[0] == "report":
        year = int(data_parts[1])
        month = int(data_parts[2])
        
        await query.message.edit_text(
            f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ {month:02d}.{year}...\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )
        
        try:
            with next(get_db()) as db:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                excel_file, chart_file, period_name = await report_service.generate_monthly_report(
                    db, year, month
                )
                
                if not excel_file:
                    await query.message.edit_text(
                        f"üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {period_name}"
                    )
                    return
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
                document = FSInputFile(excel_file)
                await query.message.answer_document(
                    document=document,
                    caption=f"üìä <b>–û—Ç—á–µ—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞ {period_name}</b>"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
                if chart_file:
                    photo = FSInputFile(chart_file)
                    await query.message.answer_photo(
                        photo=photo,
                        caption=f"üìà <b>–ì—Ä–∞—Ñ–∏–∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤ –∑–∞ {period_name}</b>"
                    )
                
                await query.message.edit_text(
                    f"‚úÖ –û—Ç—á–µ—Ç –∑–∞ {period_name} –≥–æ—Ç–æ–≤!"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"
            )
    
    elif data_parts[1] == "week":
        # –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        await query.message.edit_text("üìà –ù–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


@router.callback_query(F.data == "menu_settings")
async def show_settings_menu(query: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await query.answer()
    telegram_id = str(query.from_user.id)
    
    with next(get_db()) as db:
        employee = db.query(Employee).filter(Employee.telegram_id == telegram_id).first()
        
        if not employee:
            await query.message.edit_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
        
        builder = InlineKeyboardBuilder()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notifications_text = "üîî" if employee.notifications_enabled else "üîï"
        builder.row(
            InlineKeyboardButton(
                text=f"{notifications_text} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–ö–õ' if employee.notifications_enabled else '–í–´–ö–õ'}",
                callback_data="toggle_notifications"
            )
        )
        
        if employee.notifications_enabled:
            arrival_text = "üü¢" if employee.arrival_notifications else "üî¥"
            departure_text = "üü¢" if employee.departure_notifications else "üî¥"
            
            builder.row(
                InlineKeyboardButton(
                    text=f"{arrival_text} –ü—Ä–∏—Ö–æ–¥",
                    callback_data="toggle_arrival_notifications"
                ),
                InlineKeyboardButton(
                    text=f"{departure_text} –£—Ö–æ–¥",
                    callback_data="toggle_departure_notifications"
                )
            )
        
        builder.row(
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            )
        )
        
        settings_text = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {employee.name}</b>\n\n"
        settings_text += f"üì± Telegram ID: <code>{employee.telegram_id}</code>\n"
        settings_text += f"üë§ –†–æ–ª—å: {employee.role.value}\n\n"
        settings_text += "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:"
        
        await query.message.edit_text(
            settings_text,
            reply_markup=builder.as_markup()
        )


@router.callback_query(F.data.startswith("toggle_"))
async def handle_settings_toggle(query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await query.answer()
    telegram_id = str(query.from_user.id)
    
    with next(get_db()) as db:
        employee = db.query(Employee).filter(Employee.telegram_id == telegram_id).first()
        
        if not employee:
            await query.message.edit_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
        
        setting = query.data.replace("toggle_", "")
        
        if setting == "notifications":
            employee.notifications_enabled = not employee.notifications_enabled
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if employee.notifications_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            await query.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}", show_alert=True)
            
        elif setting == "arrival_notifications":
            employee.arrival_notifications = not employee.arrival_notifications
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if employee.arrival_notifications else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            await query.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ {status}", show_alert=True)
            
        elif setting == "departure_notifications":
            employee.departure_notifications = not employee.departure_notifications
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if employee.departure_notifications else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            await query.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ {status}", show_alert=True)
        
        db.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await show_settings_menu(query)


@router.callback_query(F.data == "main_menu")
async def show_main_menu(query: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await query.answer()
    telegram_id = str(query.from_user.id)
    
    with next(get_db()) as db:
        is_admin_user = is_admin(telegram_id, db)
        
        await query.message.edit_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_menu(is_admin_user)
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–∞—Ä—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.callback_query(F.data.startswith("handle_unknown_"))
async def handle_unknown_card(query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–∞—Ä—Ç—É"""
    await query.answer()
    
    parts = query.data.split("_")
    if len(parts) != 3:
        return
    
    action = parts[2]  # manual –∏–ª–∏ link
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = query.message.text
    lines = message_text.split('\n')
    serial = None
    
    for line in lines:
        if '–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä:' in line:
            serial = line.split(':')[1].strip()
            break
    
    if not serial:
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã")
        return
    
    if action == "manual":
        # –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        await query.message.edit_text(
            f"üë• –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
            f"üí≥ –ö–∞—Ä—Ç–∞: <code>{serial}</code>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:"
        )
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        
    elif action == "link":
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
        with next(get_db()) as db:
            try:
                registration_url = await registration_service.create_registration_link(
                    db, serial
                )
                
                builder = InlineKeyboardBuilder()
                builder.row(
                    InlineKeyboardButton(
                        text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É",
                        url=registration_url
                    )
                )
                
                await query.message.edit_text(
                    f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞</b>\n\n"
                    f"üí≥ –ö–∞—Ä—Ç–∞: <code>{serial}</code>\n"
                    f"‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {(datetime.now() + timedelta(hours=config.REGISTRATION_LINK_EXPIRE_HOURS)).strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n"
                    f"<code>{registration_url}</code>",
                    reply_markup=builder.as_markup()
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
                await query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_attendance_notification(employee: Employee, event: AttendanceEvent, card: RFIDCard):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
    if not employee.telegram_id:
        return
    
    event_emoji = "üü¢" if event.event_type == EventType.ARRIVAL else "üî¥"
    event_text = "–ü—Ä–∏—Ö–æ–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É" if event.event_type == EventType.ARRIVAL else "–£—Ö–æ–¥ —Å —Ä–∞–±–æ—Ç—ã"
    
    local_time = event.local_time
    time_str = local_time.strftime('%H:%M')
    date_str = local_time.strftime('%d.%m.%Y')
    
    message_text = f"{event_emoji} <b>{event_text}</b>\n\n"
    message_text += f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
    message_text += f"üìÖ –î–∞—Ç–∞: {date_str}\n"
    message_text += f"üí≥ –ö–∞—Ä—Ç–∞: <code>{card.serial_number}</code>"
    
    try:
        await bot.send_message(
            chat_id=employee.telegram_id,
            text=message_text
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee.name} ({employee.telegram_id})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee.name}: {e}")


async def send_admin_notification(message_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if not config.TELEGRAM_ADMIN_ID:
        return
    
    try:
        await bot.send_message(
            chat_id=config.TELEGRAM_ADMIN_ID,
            text=message_text
        )
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


async def send_unknown_card_notification(serial: str, timestamp: datetime):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ"""
    if not config.TELEGRAM_ADMIN_ID:
        return
    
    local_time = timestamp.strftime('%d.%m.%Y %H:%M:%S')
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üë§ –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é",
            callback_data=f"handle_unknown_manual_{serial}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üîó –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É",
            callback_data=f"handle_unknown_link_{serial}"
        )
    )
    
    message_text = f"üî¥ <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞</b>\n\n"
    message_text += f"üí≥ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: <code>{serial}</code>\n"
    message_text += f"‚è∞ –í—Ä–µ–º—è: {local_time}\n\n"
    message_text += f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    try:
        await bot.send_message(
            chat_id=config.TELEGRAM_ADMIN_ID,
            text=message_text,
            reply_markup=builder.as_markup()
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ: {serial}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ: {e}")


async def start_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not config.validate():
            raise Exception("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞")
        
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –°–ö–£–î Enhanced...")
        
        # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        await bot.delete_webhook(drop_pending_updates=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username} ({bot_info.full_name})")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—É—Å–∫–µ
        if config.TELEGRAM_ADMIN_ID:
            try:
                await bot.send_message(
                    chat_id=config.TELEGRAM_ADMIN_ID,
                    text="ü§ñ <b>–°–∏—Å—Ç–µ–º–∞ –°–ö–£–î Enhanced –∑–∞–ø—É—â–µ–Ω–∞</b>\n\n"
                         f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{bot_info.username}\n"
                         f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise


async def stop_bot():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
    try:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        if config.TELEGRAM_ADMIN_ID:
            try:
                await bot.send_message(
                    chat_id=config.TELEGRAM_ADMIN_ID,
                    text="ü§ñ <b>–°–∏—Å—Ç–µ–º–∞ –°–ö–£–î Enhanced –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
                         f"‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
                         f"üïê –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        
        await bot.session.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")


# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
__all__ = [
    'bot', 'dp', 'router', 'start_bot', 'stop_bot',
    'send_attendance_notification', 'send_admin_notification', 'send_unknown_card_notification'
]


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ standalone —Ä–µ–∂–∏–º–µ
    asyncio.run(start_bot()) 