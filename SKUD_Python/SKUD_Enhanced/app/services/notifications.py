#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

from datetime import datetime
from typing import Optional, List
from loguru import logger

from ..models import Employee, AttendanceEvent, EventType


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, bot=None):
        self.bot = bot
    
    async def send_attendance_notification(
        self, 
        employee: Employee, 
        event: AttendanceEvent, 
        card_serial: str
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        
        Args:
            employee: –°–æ—Ç—Ä—É–¥–Ω–∏–∫
            event: –°–æ–±—ã—Ç–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
            card_serial: –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not self.bot:
                logger.warning("Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            if not employee.telegram_id:
                logger.debug(f"–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.name} –Ω–µ—Ç Telegram ID")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if not employee.notifications_enabled:
                logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è {employee.name}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if event.event_type == EventType.ARRIVAL and not employee.arrival_notifications:
                logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è {employee.name}")
                return False
            
            if event.event_type == EventType.DEPARTURE and not employee.departure_notifications:
                logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è {employee.name}")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_attendance_message(employee, event, card_serial)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=employee.telegram_id,
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee.name} ({employee.telegram_id})")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee.name}: {e}")
            return False
    
    def _format_attendance_message(
        self, 
        employee: Employee, 
        event: AttendanceEvent, 
        card_serial: str
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
        
        # –≠–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if event.event_type == EventType.ARRIVAL:
            emoji = "üü¢"
            action = "–ü—Ä–∏—Ö–æ–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É"
            greeting = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É, <b>{employee.name}</b>!"
        else:
            emoji = "üî¥"
            action = "–£—Ö–æ–¥ —Å —Ä–∞–±–æ—Ç—ã"
            greeting = f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è, <b>{employee.name}</b>!"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        local_time = event.local_time
        time_str = local_time.strftime('%H:%M')
        date_str = local_time.strftime('%d.%m.%Y')
        
        message = f"{emoji} <b>{action}</b>\n\n"
        message += f"{greeting}\n\n"
        message += f"‚è∞ –í—Ä–µ–º—è: <b>{time_str}</b>\n"
        message += f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        message += f"üí≥ –ö–∞—Ä—Ç–∞: <code>{card_serial}</code>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if event.notes:
            message += f"\nüìù –ó–∞–º–µ—Ç–∫–∞: {event.notes}"
        
        return message
    
    async def send_admin_notification(
        self, 
        admin_id: str, 
        message: str, 
        reply_markup=None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        
        Args:
            admin_id: Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not self.bot:
                logger.warning("Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            await self.bot.send_message(
                chat_id=admin_id,
                text=message,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ({admin_id})")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
            return False
    
    async def send_unknown_card_notification(
        self, 
        admin_id: str, 
        card_serial: str, 
        timestamp: datetime,
        reply_markup=None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ
        
        Args:
            admin_id: Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            card_serial: –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
            timestamp: –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
            reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            local_time = timestamp.strftime('%d.%m.%Y %H:%M:%S')
            
            message = f"üî¥ <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞</b>\n\n"
            message += f"üí≥ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: <code>{card_serial}</code>\n"
            message += f"‚è∞ –í—Ä–µ–º—è: {local_time}\n\n"
            message += f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            return await self.send_admin_notification(admin_id, message, reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ: {e}")
            return False
    
    async def send_system_notification(
        self, 
        admin_id: str, 
        title: str, 
        details: str, 
        level: str = "INFO"
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        
        Args:
            admin_id: Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            details: –î–µ—Ç–∞–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            level: –£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ (INFO, WARNING, ERROR)
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
            emoji_map = {
                "INFO": "‚ÑπÔ∏è",
                "WARNING": "‚ö†Ô∏è",
                "ERROR": "üö®",
                "SUCCESS": "‚úÖ"
            }
            
            emoji = emoji_map.get(level, "üìã")
            
            message = f"{emoji} <b>{title}</b>\n\n"
            message += details
            message += f"\n\nüïê {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
            
            return await self.send_admin_notification(admin_id, message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def send_bulk_notification(
        self, 
        employee_ids: List[str], 
        message: str
    ) -> dict:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        
        Args:
            employee_ids: –°–ø–∏—Å–æ–∫ Telegram ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            if not self.bot:
                logger.warning("Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return {"success": 0, "failed": len(employee_ids)}
            
            success_count = 0
            failed_count = 0
            
            for employee_id in employee_ids:
                try:
                    await self.bot.send_message(
                        chat_id=employee_id,
                        text=message,
                        parse_mode='HTML'
                    )
                    success_count += 1
                    
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {employee_id}: {e}")
                    failed_count += 1
            
            logger.info(f"–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: {success_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –Ω–µ—É–¥–∞—á")
            
            return {
                "success": success_count,
                "failed": failed_count,
                "total": len(employee_ids)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            return {"success": 0, "failed": len(employee_ids), "error": str(e)}
    
    async def send_report_notification(
        self, 
        employee_id: str, 
        report_name: str, 
        report_path: str = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞
        
        Args:
            employee_id: Telegram ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            report_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not self.bot:
                return False
            
            message = f"üìä <b>–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤</b>\n\n"
            message += f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {report_name}\n"
            message += f"üïê –°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            
            if report_path:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                with open(report_path, 'rb') as file:
                    await self.bot.send_document(
                        chat_id=employee_id,
                        document=file,
                        caption=message,
                        parse_mode='HTML'
                    )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await self.bot.send_message(
                    chat_id=employee_id,
                    text=message,
                    parse_mode='HTML'
                )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ—Ç—á–µ—Ç–µ: {report_name}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –æ—Ç—á–µ—Ç–µ: {e}")
            return False 