#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç ESP32 —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª—è
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import requests
import json
from datetime import datetime

def test_esp32_request(serial, employee_name=""):
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç ESP32 —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª—è"""
    
    # URL API —Å–µ—Ä–≤–µ—Ä–∞
    url = "http://localhost:5000/api/attendance"
    
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∫–∞–∫ –æ—Ç ESP32)
    data = {
        "serial": serial,
        "time": current_time
    }
    
    print(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç ESP32...")
    print(f"üì° URL: {url}")
    print(f"üìã –î–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)}")
    print(f"üë§ –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee_name}")
    print("-" * 50)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
        response = requests.post(url, json=data, timeout=10)
        
        print(f"üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
        print(f"üî¢ –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
        
        if response.status_code == 200:
            response_data = response.json()
            print(f"‚úÖ –£—Å–ø–µ—Ö: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
            print(f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {response_data.get('employee', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"‚è∞ –°–æ–±—ã—Ç–∏–µ: {response_data.get('event', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"üïê –í—Ä–µ–º—è: {response_data.get('time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ api_server.py –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    print("=" * 50)
    print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –°–ö–£–î - —Å–∏–º—É–ª—è—Ü–∏—è ESP32")
    print("=" * 50)
    print()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ employees.json
    test_cards = [
        ("894046B8", "–¢–∞—Ä–∞—Å–æ–≤ –ù–∏–∫–∏—Ç–∞"),
        ("97D3A7DD", "–ü–∞–ª–∫–∏–Ω –°–µ–º—ë–Ω"),
        ("992BEE97", "–ü–æ–ª—è–∫–æ–≤ –ü–∞–≤–µ–ª"),
        ("UNKNOWN123", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞")  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–∞—Ä—Ç—É
    ]
    
    for serial, name in test_cards:
        test_esp32_request(serial, name)
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞...")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print()
    print("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ api.log")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –±–æ—Ç–µ") 
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ data/attendance.csv")
    print("4. –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ data/employee_telegram.json")

if __name__ == '__main__':
    main()
