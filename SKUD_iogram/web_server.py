#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–í–µ–±-—Å–µ—Ä–≤–µ—Ä –°–ö–£–î –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ main.py
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É SKUD_iogram
"""

import sys
import os
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

from flask import Flask, request, jsonify, render_template, redirect, url_for, send_from_directory, flash
import pandas as pd
import os
import json
from datetime import datetime, timedelta
import logging
from logging.handlers import RotatingFileHandler
import calendar
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib
matplotlib.use('Agg')  # –î–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from config import config
from utils.data_manager import data_manager

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Flask
app = Flask(__name__)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è flash —Å–æ–æ–±—â–µ–Ω–∏–π
app.secret_key = 'skud_secret_key_2025'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        RotatingFileHandler('web_server.log', maxBytes=10485760, backupCount=5),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
def notify_admin(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ Telegram Bot HTTP API"""
    try:
        import requests
        
        # –¢–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        BOT_TOKEN = "7853971577:AAGjaqm1yeEpy1mY8sk7ll7bnDyS2_cLDGY"
        ADMIN_USER_ID = 42291783
        
        # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        data = {
            'chat_id': ADMIN_USER_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {message}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {str(e)}")

def load_employee_telegram_ids():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤—è–∑—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∏—Ö Telegram ID"""
    try:
        employee_telegram_file = os.path.join(config.DATA_DIR, 'employee_telegram.json')
        if os.path.exists(employee_telegram_file):
            with open(employee_telegram_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        else:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            default_mapping = {
                "–ü–æ–ª—è–∫–æ–≤ –ü–∞–≤–µ–ª": None,
                "–¢–∞—Ä–∞—Å–æ–≤ –ù–∏–∫–∏—Ç–∞": None,
                "–ü–æ–ª—è–∫–æ–≤ –î–º–∏—Ç—Ä–∏–π": None,
                "–®—É—Ä–∞": None,
                "–ü—É—â–∏–Ω—Å–∫–∏–π –ú–∞—Ä–∫": None,
                "–ü–∞–ª–∫–∏–Ω –°–µ–º—ë–Ω": None
            }
            with open(employee_telegram_file, 'w', encoding='utf-8') as f:
                json.dump(default_mapping, f, ensure_ascii=False, indent=4)
            logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å–≤—è–∑–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å Telegram: {employee_telegram_file}")
            return default_mapping
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤—è–∑–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å Telegram: {str(e)}")
        return {}

def send_employee_notification(employee_name, event_type, time_str, date_str, serial):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –æ –µ–≥–æ –ø—Ä–∏—Ö–æ–¥–µ/—É—Ö–æ–¥–µ"""
    try:
        employee_telegram_ids = load_employee_telegram_ids()
        employee_telegram_id = employee_telegram_ids.get(employee_name)
        
        if not employee_telegram_id:
            logger.info(f"Telegram ID –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return
        
        import requests
        
        # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        BOT_TOKEN = "7853971577:AAGjaqm1yeEpy1mY8sk7ll7bnDyS2_cLDGY"
        
        # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        
        # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        emoji = "üü¢" if event_type == "–ø—Ä–∏—Ö–æ–¥" else "üî¥"
        
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        message_text = f"{emoji} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n" \
                      f"üìÖ –í–∞—à {event_type} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ {time_str}\n" \
                      f"üìÜ –î–∞—Ç–∞: {date_str}\n" \
                      f"üè∑Ô∏è –ö–∞—Ä—Ç–∞: {serial}\n\n" \
                      f"–•–æ—Ä–æ—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è! üòä"
        
        if event_type == "—É—Ö–æ–¥":
            message_text = f"{emoji} –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!\n\n" \
                          f"üìÖ –í–∞—à {event_type} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ {time_str}\n" \
                          f"üìÜ –î–∞—Ç–∞: {date_str}\n" \
                          f"üè∑Ô∏è –ö–∞—Ä—Ç–∞: {serial}\n\n" \
                          f"–£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞! üëã"
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        data = {
            'chat_id': employee_telegram_id,
            'text': message_text,
            'parse_mode': 'HTML'
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_name} (ID: {employee_telegram_id}): {event_type}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_name}: {response.status_code} - {response.text}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_name}: {str(e)}")

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç ESP32
@app.route('/api/attendance', methods=['POST'])
def record_attendance():
    try:
        data = request.json
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")
        
        if not data or 'serial' not in data or 'time' not in data:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return jsonify({
                'status': 'error',
                'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'
            }), 400
        
        serial = data['serial'].upper()
        timestamp = data['time']
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        employees = data_manager.load_employees()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
        if serial not in employees:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {serial}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ
            unknown_card_message = f"–°–ö–£–î: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞: {serial}\n\n" \
                                  f"–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n" \
                                  f"/add_employee {serial} –ò–º—è_–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
            notify_admin(unknown_card_message)
            
            return jsonify({
                'status': 'unknown',
                'message': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á: {serial}'
            }), 404
        
        employee_name = employees[serial]
        logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee_name}")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        dt = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
        date_str = dt.strftime('%Y-%m-%d')
        time_str = dt.strftime('%H:%M')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        df = data_manager.load_attendance_data()
        
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –¥–∞—Ç—ã
        mask = (df['date'] == date_str) & (df['employee'] == employee_name)
        
        if mask.any():
            # –ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            row = df.loc[mask].iloc[0]
            idx = df.loc[mask].index[0]
            
            if pd.isna(row['arrival']) or row['arrival'] == '':
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏—Ö–æ–¥
                df.at[idx, 'arrival'] = time_str
                event_type = '–ø—Ä–∏—Ö–æ–¥'
            elif pd.isna(row['departure']) or row['departure'] == '':
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Ö–æ–¥
                df.at[idx, 'departure'] = time_str
                event_type = '—É—Ö–æ–¥'
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ö–æ–¥ (–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
                df.at[idx, 'departure'] = time_str
                event_type = '—É—Ö–æ–¥ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)'
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å (–ø–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ = –ø—Ä–∏—Ö–æ–¥)
            new_row = {
                'date': date_str,
                'employee': employee_name,
                'arrival': time_str,
                'departure': ''
            }
            df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
            event_type = '–ø—Ä–∏—Ö–æ–¥'
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        df.to_csv(config.ATTENDANCE_FILE, index=False)
        
        logger.info(f"–ó–∞–ø–∏—Å–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_type} –¥–ª—è {employee_name} –≤ {time_str} ({date_str})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        notification_message = f"–°–ö–£–î: {employee_name}: {event_type} –≤ {time_str} ({date_str})"
        notify_admin(notification_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
        send_employee_notification(employee_name, event_type, time_str, date_str, serial)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç ESP32
        return jsonify({
            'status': 'success',
            'message': '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã',
            'employee': employee_name,
            'event': event_type,
            'time': time_str,
            'date': date_str
        })
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}'
        }), 400
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç ESP32: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

# API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({
        'status': 'ok',
        'timestamp': datetime.now().isoformat(),
        'message': '–°–ö–£–î –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
        'version': '2.0 (aiogram + web)',
        'data_files': {
            'attendance': os.path.exists(config.ATTENDANCE_FILE),
            'employees': os.path.exists(config.EMPLOYEES_FILE)
        }
    })

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@app.route('/api/current-stats', methods=['GET'])
def current_stats():
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        df = data_manager.load_attendance_data()
        
        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        today = datetime.now().strftime('%Y-%m-%d')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        employees = data_manager.load_employees()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_records = df[df['date'] == today]
        
        # –°—á–∏—Ç–∞–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö (–µ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥, –Ω–æ –Ω–µ—Ç —É—Ö–æ–¥–∞)
        today_present = len(today_records[
            (today_records['arrival'].notna()) & 
            (today_records['arrival'] != '') & 
            ((today_records['departure'].isna()) | (today_records['departure'] == ''))
        ])
        
        return jsonify({
            'today_present': today_present,
            'total_employees': len(employees),
            'total_records': len(df),
            'today_records': len(today_records),
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return jsonify({
            'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
            'timestamp': datetime.now().isoformat()
        }), 500

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
@app.route('/dashboard')
@app.route('/')
def dashboard():
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        df = data_manager.load_attendance_data()
        
        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        today = datetime.now().strftime('%Y-%m-%d')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        employees = data_manager.load_employees()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_records = df[df['date'] == today]
        
        # –°—á–∏—Ç–∞–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
        today_present = len(today_records[
            (today_records['arrival'].notna()) & 
            (today_records['arrival'] != '') & 
            ((today_records['departure'].isna()) | (today_records['departure'] == ''))
        ])
        today_absent = len(employees) - today_present
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        recent_events = []
        for _, row in df.sort_values('date', ascending=False).head(5).iterrows():
            has_arrival = pd.notna(row['arrival']) and row['arrival'] != ''
            has_departure = pd.notna(row['departure']) and row['departure'] != ''
            
            if has_arrival and not has_departure:
                event_type = '–ø—Ä–∏—Ö–æ–¥'
                time_str = row['arrival']
            elif has_departure:
                event_type = '—É—Ö–æ–¥'
                time_str = row['departure']
            else:
                continue
                
            recent_events.append({
                'employee': row['employee'],
                'event_type': event_type,
                'time': time_str,
                'date': row['date']
            })
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        dates = [(datetime.now() - timedelta(days=i)).strftime('%Y-%m-%d') for i in range(6, -1, -1)]
        weekly_labels = [(datetime.now() - timedelta(days=i)).strftime('%d.%m') for i in range(6, -1, -1)]
        weekly_data = []
        
        for date in dates:
            count = len(df[df['date'] == date])
            weekly_data.append(count)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏—Ö–æ–¥–∞
        arrival_labels = list(employees.values())
        arrival_data = []
        
        for employee in employees.values():
            employee_records = df[df['employee'] == employee]
            if not employee_records.empty:
                arrival_times = employee_records['arrival'].dropna()
                arrival_times = arrival_times[arrival_times != '']
                if len(arrival_times) > 0:
                    avg_hour = sum([int(t.split(':')[0]) + int(t.split(':')[1]) / 60 for t in arrival_times]) / len(arrival_times)
                    arrival_data.append(round(avg_hour, 2))
                else:
                    arrival_data.append(0)
            else:
                arrival_data.append(0)
        
        return render_template('dashboard.html', 
                              today_present=today_present,
                              today_absent=today_absent,
                              recent_events=recent_events,
                              weekly_labels=weekly_labels,
                              weekly_data=weekly_data,
                              arrival_labels=arrival_labels,
                              arrival_data=arrival_data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ dashboard: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {str(e)}", 500

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è Telegram Web App –æ—Ç—á–µ—Ç–æ–≤
@app.route('/telegram-reports')
@app.route('/reports')
def telegram_reports():
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        df = data_manager.load_attendance_data()
        
        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        today = datetime.now().strftime('%Y-%m-%d')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        employees = data_manager.load_employees()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_records = df[df['date'] == today]
        
        # –°—á–∏—Ç–∞–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö (–µ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥, –Ω–æ –Ω–µ—Ç —É—Ö–æ–¥–∞)
        today_present = len(today_records[
            (today_records['arrival'].notna()) & 
            (today_records['arrival'] != '') & 
            ((today_records['departure'].isna()) | (today_records['departure'] == ''))
        ])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–µ—Ç
        available_years = []
        if not df.empty:
            available_years = sorted(df['date'].str[:4].unique().tolist())
        if not available_years:
            available_years = [str(datetime.now().year)]
        
        # –°–ª–æ–≤–∞—Ä—å –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        months = {
            1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
            5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
            9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
        recent_reports = []
        try:
            for filename in os.listdir(config.REPORTS_DIR):
                if filename.endswith('.xlsx') or filename.endswith('.pdf') or filename.endswith('.csv'):
                    recent_reports.append({
                        'name': filename,
                        'filename': filename
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –≤ –Ω–∞—á–∞–ª–µ)
            recent_reports.sort(key=lambda x: os.path.getmtime(os.path.join(config.REPORTS_DIR, x['filename'])), reverse=True)
            recent_reports = recent_reports[:5]  # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç—á–µ—Ç–æ–≤
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}")
        
        return render_template('telegram-reports.html',
                              available_years=available_years,
                              months=months,
                              recent_reports=recent_reports,
                              today_present=today_present,
                              total_employees=len(employees),
                              tg_webapp=True)  # –§–ª–∞–≥ –¥–ª—è WebApp
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ telegram_reports: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—á–µ—Ç–æ–≤: {str(e)}", 500

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
@app.route('/generate_report', methods=['POST'])
def generate_report():
    try:
        year = int(request.form.get('year'))
        month = int(request.form.get('month'))
        
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ {month}/{year}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        excel_file, chart_file, period = data_manager.generate_monthly_report(year, month)
        
        if excel_file is None:
            flash(f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {calendar.month_name[month]} {year}', 'error')
            return redirect(url_for('telegram_reports'))
        
        flash(f'–û—Ç—á–µ—Ç –∑–∞ {period} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω', 'success')
        return redirect(url_for('telegram_reports'))
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}', 'error')
        return redirect(url_for('telegram_reports'))

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
@app.route('/download_report/<filename>')
def download_report(filename):
    return send_from_directory(config.REPORTS_DIR, filename, as_attachment=True)

# API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –±–æ—Ç–æ–º)
@app.route('/api/add_employee', methods=['POST'])
def add_employee_api():
    try:
        data = request.json
        if not data or 'serial' not in data or 'name' not in data:
            return jsonify({
                'status': 'error',
                'message': '–¢—Ä–µ–±—É—é—Ç—Å—è –ø–æ–ª—è serial –∏ name'
            }), 400
        
        serial = data['serial'].upper()
        name = data['name']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
        employees = data_manager.load_employees()
        if serial in employees:
            return jsonify({
                'status': 'error',
                'message': f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –∫–∞—Ä—Ç–æ–π {serial} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            }), 409
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if data_manager.add_employee(serial, name):
            logger.info(f"–ß–µ—Ä–µ–∑ API –¥–æ–±–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {name} ({serial})")
            return jsonify({
                'status': 'success',
                'message': f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {name} —Å –∫–∞—Ä—Ç–æ–π {serial} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω'
            })
        else:
            return jsonify({
                'status': 'error',
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'
            }), 500
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ API: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}'
        }), 500

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –°–ö–£–î")
    logger.info(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    logger.info(f"–§–∞–π–ª –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: {config.ATTENDANCE_FILE}")
    logger.info(f"–§–∞–π–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {config.EMPLOYEES_FILE}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.run(host='0.0.0.0', port=5000, debug=False)
