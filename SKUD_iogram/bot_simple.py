#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –°–ö–£–î –±–æ—Ç–∞ –Ω–∞ aiogram –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
–ë–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç pandas/matplotlib
"""

import asyncio
import logging
import json
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "8044045216:AAEamiCHNsr5jZaXi7NFKPe47BoWWkgucbM"
ALLOWED_USERS = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ = –¥–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö
WEBAPP_URL = "https://example.com"  # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebApp (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π HTTPS URL)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

def check_user_access(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–æ—Ç—É"""
    if not ALLOWED_USERS:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
        return True
    return user_id in ALLOWED_USERS

async def send_access_denied(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ"""
    await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}")

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    if not check_user_access(user_id):
        await send_access_denied(message)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥ (–±–µ–∑ WebApp –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    keyboard = [
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="check_data")],
        [InlineKeyboardButton(text="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="diagnose")],
        [InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.reply(
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–ö–£–î –±–æ—Ç –Ω–∞ aiogram!\n\n"
        "üì± –¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞\n"
        "‚Ä¢ /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n"
        "‚Ä¢ /webapp - –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"
        "–¢–æ–∫–µ–Ω: 8044045216:AAEamiCHNsr5jZaXi7NFKPe47BoWWkgucbM\n"
        "–î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–º–µ–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ config.py",
        reply_markup=reply_markup
    )

@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    user_id = message.from_user.id
    
    if not check_user_access(user_id):
        await send_access_denied(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    data_dir = "data"
    attendance_file = os.path.join(data_dir, "attendance.csv")
    employees_file = os.path.join(data_dir, "employees.json")
    
    status_text = "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –°–ö–£–î\n\n"
    
    if os.path.exists(data_dir):
        status_text += "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: –Ω–∞–π–¥–µ–Ω–∞\n"
    else:
        status_text += "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n"
    
    if os.path.exists(attendance_file):
        file_size = os.path.getsize(attendance_file)
        status_text += f"‚úÖ –§–∞–π–ª –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: –Ω–∞–π–¥–µ–Ω ({file_size} –±–∞–π—Ç)\n"
    else:
        status_text += "‚ùå –§–∞–π–ª –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
    
    if os.path.exists(employees_file):
        status_text += "‚úÖ –§–∞–π–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: –Ω–∞–π–¥–µ–Ω\n"
        try:
            with open(employees_file, 'r', encoding='utf-8') as f:
                employees = json.load(f)
                status_text += f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(employees)}\n"
        except:
            status_text += "‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
    else:
        status_text += "‚ùå –§–∞–π–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
    
    status_text += f"\nüïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    
    await message.reply(status_text)

@dp.message(Command("info"))
async def cmd_info(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info"""
    user_id = message.from_user.id
    
    if not check_user_access(user_id):
        await send_access_denied(message)
        return
    
    info_text = (
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n\n"
        "ü§ñ –ë–æ—Ç: –°–ö–£–î aiogram –≤–µ—Ä—Å–∏—è\n"
        "üì± –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: aiogram 3.13.1\n"
        "üîß –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω: 8044045216...\n"
        "üåê WebApp URL: localhost:5000\n\n"
        "üîÑ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WebApp\n"
        "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        "üìù –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:\n"
        "‚Ä¢ pandas (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö)\n"
        "‚Ä¢ matplotlib (–≥—Ä–∞—Ñ–∏–∫–∏)\n"
        "‚Ä¢ xlsxwriter (Excel –æ—Ç—á–µ—Ç—ã)\n\n"
        "üöÄ –ì–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Linux —Å–µ—Ä–≤–µ—Ä!"
    )
    
    await message.reply(info_text)

@dp.message(Command("webapp"))
async def cmd_webapp(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /webapp"""
    user_id = message.from_user.id
    
    if not check_user_access(user_id):
        await send_access_denied(message)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Web App
    keyboard = [[InlineKeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç—ã", web_app=WebAppInfo(url=WEBAPP_URL))]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.reply(
        "üåê Telegram Web App\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ç—á–µ—Ç–æ–≤.\n"
        "–í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ WebApp –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ localhost:5000",
        reply_markup=reply_markup
    )

@dp.callback_query(F.data == "check_data")
async def handle_check_data(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    await callback.answer()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ pandas
    data_dir = "data"
    attendance_file = os.path.join(data_dir, "attendance.csv")
    
    if os.path.exists(attendance_file):
        try:
            with open(attendance_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                records_count = len(lines) - 1  # –ú–∏–Ω—É—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫
            
            response = (
                f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n\n"
                f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {attendance_file}\n"
                f"üìù –ó–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ: {records_count}\n"
                f"üïê –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            )
        except Exception as e:
            response = f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"
    else:
        response = "‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    await bot.send_message(callback.message.chat.id, response)

@dp.callback_query(F.data == "diagnose")
async def handle_diagnose(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    await callback.answer()
    
    report = "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    files_to_check = [
        ("config.py", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"),
        ("bot.py", "–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç"),
        ("utils/data_manager.py", "–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö"),
        ("data/employees.json", "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"),
        ("data/attendance.csv", "–î–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"),
        ("requirements.txt", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"),
        ("README.md", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    ]
    
    for file_path, description in files_to_check:
        if os.path.exists(file_path):
            report += f"‚úÖ {description}: –Ω–∞–π–¥–µ–Ω\n"
        else:
            report += f"‚ùå {description}: –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    dirs_to_check = [
        ("data", "–î–∞–Ω–Ω—ã–µ"),
        ("data/reports", "–û—Ç—á–µ—Ç—ã"),
        ("utils", "–£—Ç–∏–ª–∏—Ç—ã")
    ]
    
    report += "\nüìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n"
    for dir_path, description in dirs_to_check:
        if os.path.exists(dir_path):
            report += f"‚úÖ {description}: –Ω–∞–π–¥–µ–Ω–∞\n"
        else:
            report += f"‚ùå {description}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n"
    
    report += f"\nüïê –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {datetime.now().strftime('%H:%M:%S')}"
    
    await bot.send_message(callback.message.chat.id, report)

@dp.callback_query(F.data == "info")
async def handle_info(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    await callback.answer()
    
    info_text = (
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n\n"
        "–ë–æ—Ç: –°–ö–£–î aiogram –≤–µ—Ä—Å–∏—è\n"
        "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: aiogram 3.13.1\n"
        "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω: 8044045216...\n"
        "WebApp URL: example.com\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WebApp\n"
        "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:\n"
        "‚Ä¢ pandas (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö)\n"
        "‚Ä¢ matplotlib (–≥—Ä–∞—Ñ–∏–∫–∏)\n"
        "‚Ä¢ xlsxwriter (Excel –æ—Ç—á–µ—Ç—ã)\n\n"
        "–ì–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Linux —Å–µ—Ä–≤–µ—Ä!"
    )
    
    await bot.send_message(callback.message.chat.id, info_text)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –°–ö–£–î –±–æ—Ç–∞ –Ω–∞ aiogram (—Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)")
    logger.info(f"–¢–æ–∫–µ–Ω: {TELEGRAM_TOKEN}")
    logger.info(f"WebApp URL: {WEBAPP_URL}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    asyncio.run(main())
