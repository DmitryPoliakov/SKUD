#!/usr/bin/env python
# -*- coding: utf-8 -*-

import asyncio
import logging
import json
import calendar
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, BufferedInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from config import config
from utils.data_manager import data_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class EmployeeStates(StatesGroup):
    waiting_for_employee_data = State()

def check_user_access(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–æ—Ç—É"""
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    if user_id == 7853971577:  # ID –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
        return False
        
    if not config.ALLOWED_USERS:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
        return True
    return user_id in config.ALLOWED_USERS

async def send_access_denied(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ"""
    user_id = message.from_user.id
    
    # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ —Å–∞–º–æ–º—É –±–æ—Ç—É
    if user_id == 7853971577:
        logger.info(f"üö´ ACCESS_DENIED: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ç–∫–∞–∑ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ {user_id}")
        return
        
    await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")

async def notify_admin(message_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        from utils.notifications import send_notification
        await send_notification(message_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    if not check_user_access(user_id):
        await send_access_denied(message)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥
    keyboard = [
        [InlineKeyboardButton(text="–û—Ç—á–µ—Ç –ø–æ –º–µ—Å—è—Ü–∞–º", callback_data="menu_report")],
        [InlineKeyboardButton(text="–û—Ç—á–µ—Ç—ã —á–µ—Ä–µ–∑ Web App", web_app=WebAppInfo(url=config.WEBAPP_URL))]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å–∏—Å—Ç–µ–º—ã –°–ö–£–î!\n\n"
        "üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /report - –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞ –ª—é–±–æ–π –º–µ—Å—è—Ü\n"
        "‚Ä¢ /check_data - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ /add_employee - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
        "‚Ä¢ /webapp - –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç—ã —á–µ—Ä–µ–∑ Web App\n"
        "‚Ä¢ /diagnose - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏",
        reply_markup=reply_markup
    )

@dp.message(Command("diagnose"))
async def cmd_diagnose(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /diagnose"""
    user_id = message.from_user.id
    
    if not check_user_access(user_id):
        await send_access_denied(message)
        return
    
    await message.reply("üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    report = data_manager.diagnose_data()
    await message.reply(report)

@dp.message(Command("check_data"))
async def cmd_check_data(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check_data"""
    user_id = message.from_user.id
    
    if not check_user_access(user_id):
        await send_access_denied(message)
        return
    
    await message.reply("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞–Ω–Ω—ã—Ö
    stats = data_manager.get_data_statistics()
    
    if stats['total_records'] == 0:
        await message.reply("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –°–ö–£–î\n\n"
    text += f"üìÖ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_records']}\n"
    text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {stats['period']['start']} - {stats['period']['end']}\n"
    text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {stats['employees_count']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω—è—Ö
    text += "üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π:\n"
    missing_days = 0
    
    for day_info in stats['recent_days']:
        if day_info['has_data']:
            text += f"‚úÖ {day_info['date']}: {day_info['records_count']} –∑–∞–ø–∏—Å–µ–π\n"
        else:
            text += f"‚ùå {day_info['date']}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            missing_days += 1
    
    if missing_days > 0:
        text += f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ {missing_days} –¥–Ω–µ–π –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5"
    else:
        text += f"\n‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    
    await message.reply(text)

@dp.message(Command("report"))
async def cmd_report(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report"""
    user_id = message.from_user.id
    
    if not check_user_access(user_id):
        await send_access_denied(message)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    now = datetime.now()
    current_month = now.month
    current_year = now.year
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    prev_month = current_month - 1
    prev_year = current_year
    if prev_month == 0:
        prev_month = 12
        prev_year -= 1
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
    keyboard = [
        [
            InlineKeyboardButton(
                text=f"–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü ({calendar.month_name[current_month]})", 
                callback_data=f"report_{current_year}_{current_month}"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü ({calendar.month_name[prev_month]})", 
                callback_data=f"report_{prev_year}_{prev_month}"
            )
        ],
        [
            InlineKeyboardButton(
                text="–û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç—ã —á–µ—Ä–µ–∑ Web App", 
                web_app=WebAppInfo(url=config.WEBAPP_URL)
            )
        ]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=reply_markup)

@dp.message(Command("add_employee"))
async def cmd_add_employee(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_employee"""
    user_id = message.from_user.id
    
    if not check_user_access(user_id):
        await send_access_denied(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:]  # –£–±–∏—Ä–∞–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
    
    if len(args) < 2:
        await message.reply(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/add_employee <—Å–µ—Ä–∏–π–Ω—ã–π_–Ω–æ–º–µ—Ä> <–∏–º—è_—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /add_employee ABC123 –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω"
        )
        return
    
    serial = args[0].upper()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    name = " ".join(args[1:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–∞–∫ –∏–º—è
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    if data_manager.add_employee(serial, name):
        await message.reply(
            f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {serial}\n"
            f"–ò–º—è: {name}"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {name} —Å –∫–∞—Ä—Ç–æ–π {serial}")
    else:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

@dp.message(Command("webapp"))
async def cmd_webapp(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /webapp"""
    user_id = message.from_user.id
    
    if not check_user_access(user_id):
        await send_access_denied(message)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Web App
    keyboard = [[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç—ã", web_app=WebAppInfo(url=config.WEBAPP_URL))]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.reply(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤ Telegram Web App:",
        reply_markup=reply_markup
    )

@dp.callback_query(F.data.startswith("report_"))
async def handle_report_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    user_id = callback.from_user.id
    
    if not check_user_access(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", show_alert=True)
        return
    
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    data = callback.data
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏ –º–µ—Å—è—Ü
    _, year, month = data.split("_")
    year = int(year)
    month = int(month)
    
    logger.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞ –∑–∞ {calendar.month_name[month]} {year}")
    await callback.message.edit_text(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ {calendar.month_name[month]} {year}...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    excel_file, chart_file, period = data_manager.generate_monthly_report(year, month)
    
    if excel_file is None:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ {calendar.month_name[month]} {year}")
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {period}."
        )
        return
    
    logger.info(f"–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {excel_file}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–≤–æ–¥–Ω—ã—Ö —Ü–∏—Ñ—Ä
    stats = await get_monthly_summary(year, month)
    
    if stats:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏
        summary_message = f"üìä –°–≤–æ–¥–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∑–∞ {period}:\n\n"
        summary_message += f"üïê –û–±—â–µ–µ –≤—ã—Ö: {stats['weekend_hours']:.1f} —á\n"
        summary_message += f"üïê –û–±—â–µ–µ –±—É–¥–Ω–∏: {stats['weekday_hours']:.1f} —á\n"
        summary_message += f"üïê –û–±—â–∏–π –∏—Ç–æ–≥: {stats['total_hours']:.1f} —á\n\n"
        summary_message += f"üìà –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {stats['employees_count']}\n"
        summary_message += f"üìÖ –†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: {stats['working_days']}"
        
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text=summary_message
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel-—Ñ–∞–π–ª
    with open(excel_file, 'rb') as file:
        document = BufferedInputFile(file.read(), filename=f"attendance_report_{period.replace(' ', '_')}.xlsx")
        await bot.send_document(
            chat_id=callback.message.chat.id,
            document=document,
            caption=f"üìã –û—Ç—á–µ—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞ {period}"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    with open(chart_file, 'rb') as file:
        photo = BufferedInputFile(file.read(), filename=f"chart_{period.replace(' ', '_')}.png")
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=photo,
            caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤ –∑–∞ {period}"
        )

@dp.callback_query(F.data == "menu_report")
async def handle_menu_report(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç—á–µ—Ç–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    
    if not check_user_access(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", show_alert=True)
        return
        
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    now = datetime.now()
    current_month = now.month
    current_year = now.year
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    prev_month = current_month - 1
    prev_year = current_year
    if prev_month == 0:
        prev_month = 12
        prev_year -= 1
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
    keyboard = [
        [
            InlineKeyboardButton(
                text=f"–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü ({calendar.month_name[current_month]})", 
                callback_data=f"report_{current_year}_{current_month}"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü ({calendar.month_name[prev_month]})", 
                callback_data=f"report_{prev_year}_{prev_month}"
            )
        ]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=reply_markup)

@dp.callback_query(F.data == "diagnose")
async def handle_diagnose_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    user_id = callback.from_user.id
    
    if not check_user_access(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", show_alert=True)
        return
        
    await callback.answer()
    await cmd_diagnose(callback.message)



# –ì–ª–æ–±–∞–ª—å–Ω—ã–π middleware –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å–µ—Ö updates
@dp.update.outer_middleware()
async def debug_middleware(handler, event, data):
    """Middleware –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö updates"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª—é–±—ã–µ —Ç–∏–ø—ã updates –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç ID –±–æ—Ç–∞
    user_id = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã updates
    if hasattr(event, 'message') and event.message and hasattr(event.message, 'from_user'):
        user_id = event.message.from_user.id
        username = event.message.from_user.username or "–±–µ–∑ username"
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ WebApp –¥–∞–Ω–Ω—ã—Ö
        if hasattr(event.message, 'web_app_data') and event.message.web_app_data:
            logger.info(f"üîç MIDDLEWARE: WebApp –¥–∞–Ω–Ω—ã–µ –æ—Ç ID: {user_id} (@{username})")
        else:
            text = event.message.text or event.message.caption or "–±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
            logger.info(f"üîç MIDDLEWARE: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ID: {user_id} (@{username}): '{text}'")
        
    elif hasattr(event, 'callback_query') and event.callback_query and hasattr(event.callback_query, 'from_user'):
        user_id = event.callback_query.from_user.id
        username = event.callback_query.from_user.username or "–±–µ–∑ username"
        logger.info(f"üîç MIDDLEWARE: Callback –æ—Ç ID: {user_id} (@{username})")
        
    elif hasattr(event, 'inline_query') and event.inline_query and hasattr(event.inline_query, 'from_user'):
        user_id = event.inline_query.from_user.id
        logger.info(f"üîç MIDDLEWARE: Inline query –æ—Ç ID: {user_id}")
        
    elif hasattr(event, 'edited_message') and event.edited_message and hasattr(event.edited_message, 'from_user'):
        user_id = event.edited_message.from_user.id
        logger.info(f"üîç MIDDLEWARE: Edited message –æ—Ç ID: {user_id}")
        
    else:
        logger.info(f"üîç MIDDLEWARE: –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–∏–ø update: {type(event)}")
        
    # –ü–û–õ–ù–û–ï –ò–ì–ù–û–†–ò–†–û–í–ê–ù–ò–ï –ª—é–±—ã—Ö updates –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    if user_id == 7853971577:
        logger.info(f"üö´ MIDDLEWARE: –ü–û–õ–ù–û–ï –ò–ì–ù–û–†–ò–†–û–í–ê–ù–ò–ï update –æ—Ç –±–æ—Ç–∞ {user_id}")
        return None  # –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    return await handler(event, data)

@dp.message(F.web_app_data)
async def handle_webapp_data(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App"""
    user_id = message.from_user.id
    
    if not check_user_access(user_id):
        await send_access_denied(message)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App
        raw_data = message.web_app_data.data
        logger.info(f"üîç RAW –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App: {raw_data}")
        
        data = json.loads(raw_data)
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App: {data}")
        
        action = data.get('action')
        logger.info(f"üéØ –î–µ–π—Å—Ç–≤–∏–µ: {action}")
        
        if action == 'generate_report':
            year = int(data.get('year'))
            month = int(data.get('month'))
            
            await message.reply(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ {calendar.month_name[month]} {year}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            excel_file, chart_file, period = data_manager.generate_monthly_report(year, month)
            
            if excel_file is None:
                await message.reply(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {period}.")
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–≤–æ–¥–Ω—ã—Ö —Ü–∏—Ñ—Ä
            stats = await get_monthly_summary(year, month)
            
            if stats:
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏
                summary_message = f"üìä –°–≤–æ–¥–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∑–∞ {period}:\n\n"
                summary_message += f"üïê –û–±—â–µ–µ –≤—ã—Ö: {stats['weekend_hours']:.1f} —á\n"
                summary_message += f"üïê –û–±—â–µ–µ –±—É–¥–Ω–∏: {stats['weekday_hours']:.1f} —á\n"
                summary_message += f"üïê –û–±—â–∏–π –∏—Ç–æ–≥: {stats['total_hours']:.1f} —á\n\n"
                summary_message += f"üìà –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {stats['employees_count']}\n"
                summary_message += f"üìÖ –†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: {stats['working_days']}"
                
                await message.reply(summary_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel-—Ñ–∞–π–ª
            with open(excel_file, 'rb') as file:
                document = BufferedInputFile(file.read(), filename=f"attendance_report_{period.replace(' ', '_')}.xlsx")
                await bot.send_document(
                    chat_id=message.chat.id,
                    document=document,
                    caption=f"üìã –û—Ç—á–µ—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞ {period}"
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            with open(chart_file, 'rb') as file:
                photo = BufferedInputFile(file.read(), filename=f"chart_{period.replace(' ', '_')}.png")
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo,
                    caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤ –∑–∞ {period}"
                )
        
        elif action == 'view_report':
            report_url = data.get('report_url')
            report_name = data.get('report_name')
            
            logger.info(f"üìÅ View report request: {report_name}")
            logger.info(f"üîó Report URL: {report_url}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
            filename = report_name.strip()
            file_path = os.path.join(config.REPORTS_DIR, filename)
            
            logger.info(f"üìÇ Looking for file: {file_path}")
            logger.info(f"üìã File exists: {os.path.exists(file_path)}")
            
            if os.path.exists(file_path):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                logger.info(f"üì§ Sending file: {filename}")
                with open(file_path, 'rb') as file:
                    document = BufferedInputFile(file.read(), filename=filename)
                    await bot.send_document(
                        chat_id=message.chat.id,
                        document=document,
                        caption=f"–û—Ç—á–µ—Ç: {filename}"
                    )
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                await message.reply(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç—á–µ—Ç: {report_name}\n"
                    f"–°–∫–∞—á–∞—Ç—å –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ: {report_url}"
                )
        
        else:
            await message.reply(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App: {str(e)}")
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
@dp.message()
async def handle_all_messages(message: types.Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"
    text = message.text or "–±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
    
    logger.info(f"üì© HANDLER: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id} (@{username}): '{text}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not check_user_access(user_id):
        logger.warning(f"‚ùå HANDLER: –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id} (@{username})")
        await send_access_denied(message)
        return
    
    logger.info(f"‚úÖ HANDLER: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç")
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    await message.reply("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def get_monthly_summary(year: int, month: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü"""
    try:
        df = data_manager.load_attendance_data()
        if df.empty:
            return None
        
        import pandas as pd
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
        df['date'] = pd.to_datetime(df['date'])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≥–æ–¥—É –∏ –º–µ—Å—è—Ü—É
        mask = (df['date'].dt.year == year) & (df['date'].dt.month == month)
        monthly_data = df[mask].copy()
        
        if monthly_data.empty:
            return None
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã
        monthly_data['arrival_time'] = pd.to_datetime(
            monthly_data['date'].dt.strftime('%Y-%m-%d') + ' ' + monthly_data['arrival']
        )
        monthly_data['departure_time'] = pd.to_datetime(
            monthly_data['date'].dt.strftime('%Y-%m-%d') + ' ' + monthly_data['departure']
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ —É—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        mask = monthly_data['departure_time'] < monthly_data['arrival_time']
        monthly_data.loc[mask, 'departure_time'] = monthly_data.loc[mask, 'departure_time'] + pd.Timedelta(days=1)
        
        monthly_data['hours_worked'] = (monthly_data['departure_time'] - monthly_data['arrival_time']).dt.total_seconds() / 3600
        monthly_data['is_weekend'] = monthly_data['date'].dt.dayofweek >= 5
        
        # –°–≤–æ–¥–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
        weekend_data = monthly_data[monthly_data['is_weekend'] == True]
        weekday_data = monthly_data[monthly_data['is_weekend'] == False]
        
        weekend_total_hours = weekend_data['hours_worked'].sum() if not weekend_data.empty else 0
        weekday_total_hours = weekday_data['hours_worked'].sum() if not weekday_data.empty else 0
        total_hours = monthly_data['hours_worked'].sum()
        
        return {
            'weekend_hours': weekend_total_hours,
            'weekday_hours': weekday_total_hours,
            'total_hours': total_hours,
            'employees_count': monthly_data['employee'].nunique(),
            'working_days': monthly_data['date'].nunique()
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None

async def send_admin_notification(message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if not config.ADMIN_USER_ID:
        logger.warning("ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return
    
    try:
        await bot.send_message(chat_id=config.ADMIN_USER_ID, text=message)
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {str(e)}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –°–ö–£–î –Ω–∞ aiogram")
    
    # –ö—Ä–∞—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–±–µ–∑ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
    try:
        stats = data_manager.get_data_statistics()
        logger.info(f"–î–∞–Ω–Ω—ã–µ –°–ö–£–î: {stats['total_records']} –∑–∞–ø–∏—Å–µ–π, {stats['employees_count']} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
