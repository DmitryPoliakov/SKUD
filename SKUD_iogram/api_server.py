#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import json
import pandas as pd
from datetime import datetime
from flask import Flask, request, jsonify
import logging
from logging.handlers import RotatingFileHandler

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Flask
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        RotatingFileHandler('api.log', maxBytes=10485760, backupCount=5),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
DATA_DIR = 'data'
ATTENDANCE_FILE = os.path.join(DATA_DIR, 'attendance.csv')
EMPLOYEES_FILE = os.path.join(DATA_DIR, 'employees.json')

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(DATA_DIR, exist_ok=True)

def load_employees():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(EMPLOYEES_FILE):
            with open(EMPLOYEES_FILE, 'r', encoding='utf-8') as f:
                employees = json.load(f)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
                return employees
        else:
            logger.warning(f"–§–∞–π–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ {EMPLOYEES_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {str(e)}")
        return {}

def load_attendance_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(ATTENDANCE_FILE):
            df = pd.read_csv(ATTENDANCE_FILE)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏")
            return df
        else:
            logger.warning(f"–§–∞–π–ª –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ {ATTENDANCE_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
            df = pd.DataFrame(columns=['date', 'employee', 'arrival', 'departure'])
            return df
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: {str(e)}")
        return pd.DataFrame(columns=['date', 'employee', 'arrival', 'departure'])

def save_attendance_data(df):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –≤ CSV —Ñ–∞–π–ª"""
    try:
        df.to_csv(ATTENDANCE_FILE, index=False)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(df)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: {str(e)}")

def save_new_employee(serial, name):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Å–ø–∏—Å–æ–∫"""
    try:
        employees = load_employees()
        employees[serial] = name
        with open(EMPLOYEES_FILE, 'w', encoding='utf-8') as f:
            json.dump(employees, f, ensure_ascii=False, indent=4)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {name} ({serial})")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {str(e)}")
        return False

def notify_telegram_bot(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot HTTP API"""
    try:
        import requests
        
        # –¢–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        BOT_TOKEN = "7853971577:AAGjaqm1yeEpy1mY8sk7ll7bnDyS2_cLDGY"
        ADMIN_USER_ID = 42291783
        
        # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        data = {
            'chat_id': ADMIN_USER_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {message}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {str(e)}")


def load_employee_telegram_ids():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤—è–∑—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∏—Ö Telegram ID"""
    try:
        employee_telegram_file = os.path.join(DATA_DIR, 'employee_telegram.json')
        if os.path.exists(employee_telegram_file):
            with open(employee_telegram_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        else:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            default_mapping = {
                "–ü–æ–ª—è–∫–æ–≤ –ü–∞–≤–µ–ª": None,
                "–¢–∞—Ä–∞—Å–æ–≤ –ù–∏–∫–∏—Ç–∞": None,
                "–ü–æ–ª—è–∫–æ–≤ –î–º–∏—Ç—Ä–∏–π": None,
                "–®—É—Ä–∞": None,
                "–ü—É—â–∏–Ω—Å–∫–∏–π –ú–∞—Ä–∫": None,
                "–ü–∞–ª–∫–∏–Ω –°–µ–º—ë–Ω": None
            }
            with open(employee_telegram_file, 'w', encoding='utf-8') as f:
                json.dump(default_mapping, f, ensure_ascii=False, indent=4)
            logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å–≤—è–∑–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å Telegram: {employee_telegram_file}")
            return default_mapping
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤—è–∑–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å Telegram: {str(e)}")
        return {}

def send_employee_notification(employee_name, event_type, time_str, date_str, serial):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –æ –µ–≥–æ –ø—Ä–∏—Ö–æ–¥–µ/—É—Ö–æ–¥–µ"""
    try:
        employee_telegram_ids = load_employee_telegram_ids()
        employee_telegram_id = employee_telegram_ids.get(employee_name)
        
        if not employee_telegram_id:
            logger.info(f"Telegram ID –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return
        
        import requests
        
        # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        BOT_TOKEN = "7853971577:AAGjaqm1yeEpy1mY8sk7ll7bnDyS2_cLDGY"
        
        # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        
        # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        emoji = "üü¢" if event_type == "–ø—Ä–∏—Ö–æ–¥" else "üî¥"
        
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        message_text = f"{emoji} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n" \
                      f"üìÖ –í–∞—à {event_type} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ {time_str}\n" \
                      f"üìÜ –î–∞—Ç–∞: {date_str}\n" \
                      f"üè∑Ô∏è –ö–∞—Ä—Ç–∞: {serial}\n\n" \
                      f"–•–æ—Ä–æ—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è! üòä"
        
        if event_type == "—É—Ö–æ–¥":
            message_text = f"{emoji} –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!\n\n" \
                          f"üìÖ –í–∞—à {event_type} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ {time_str}\n" \
                          f"üìÜ –î–∞—Ç–∞: {date_str}\n" \
                          f"üè∑Ô∏è –ö–∞—Ä—Ç–∞: {serial}\n\n" \
                          f"–£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞! üëã"
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        data = {
            'chat_id': employee_telegram_id,
            'text': message_text,
            'parse_mode': 'HTML'
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_name} (ID: {employee_telegram_id}): {event_type}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_name}: {response.status_code} - {response.text}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_name}: {str(e)}")

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç ESP32
@app.route('/api/attendance', methods=['POST'])
def record_attendance():
    """–û—Å–Ω–æ–≤–Ω–æ–π API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç ESP32"""
    try:
        data = request.json
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç ESP32: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        if not data or 'serial' not in data or 'time' not in data:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç ESP32")
            return jsonify({
                'status': 'error',
                'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'
            }), 400
        
        serial = data['serial'].upper()
        timestamp = data['time']
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        employees = load_employees()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
        if serial not in employees:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {serial}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ
            unknown_card_message = f"–°–ö–£–î: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞: {serial}\\n\\n" \
                                  f"–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\\n" \
                                  f"/add_employee {serial} –ò–º—è_–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
            notify_telegram_bot(unknown_card_message)
            
            return jsonify({
                'status': 'unknown',
                'message': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á: {serial}'
            }), 404
        
        employee_name = employees[serial]
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee_name}")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        dt = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
        date_str = dt.strftime('%Y-%m-%d')
        time_str = dt.strftime('%H:%M')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        df = load_attendance_data()
        
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –¥–∞—Ç—ã
        mask = (df['date'] == date_str) & (df['employee'] == employee_name)
        
        if mask.any():
            # –ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            row = df.loc[mask].iloc[0]
            idx = df.loc[mask].index[0]
            
            if pd.isna(row['arrival']) or row['arrival'] == '':
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏—Ö–æ–¥
                df.at[idx, 'arrival'] = time_str
                event_type = '–ø—Ä–∏—Ö–æ–¥'
            elif pd.isna(row['departure']) or row['departure'] == '':
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Ö–æ–¥
                df.at[idx, 'departure'] = time_str
                event_type = '—É—Ö–æ–¥'
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ö–æ–¥ (–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
                df.at[idx, 'departure'] = time_str
                event_type = '—É—Ö–æ–¥ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)'
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å (–ø–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ = –ø—Ä–∏—Ö–æ–¥)
            new_row = {
                'date': date_str,
                'employee': employee_name,
                'arrival': time_str,
                'departure': ''
            }
            df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
            event_type = '–ø—Ä–∏—Ö–æ–¥'
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        save_attendance_data(df)
        
        logger.info(f"–ó–∞–ø–∏—Å–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_type} –¥–ª—è {employee_name} –≤ {time_str} ({date_str})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        notification_message = f"–°–ö–£–î: {employee_name}: {event_type} –≤ {time_str} ({date_str})"
        notify_telegram_bot(notification_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
        send_employee_notification(employee_name, event_type, time_str, date_str, serial)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç ESP32
        return jsonify({
            'status': 'success',
            'message': '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã',
            'employee': employee_name,
            'event': event_type,
            'time': time_str,
            'date': date_str
        })
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}'
        }), 400
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç ESP32: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

# API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return jsonify({
        'status': 'ok',
        'timestamp': datetime.now().isoformat(),
        'message': 'API –°–ö–£–î —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
        'version': '2.0 (aiogram)',
        'data_files': {
            'attendance': os.path.exists(ATTENDANCE_FILE),
            'employees': os.path.exists(EMPLOYEES_FILE)
        }
    })

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@app.route('/api/stats', methods=['GET'])
def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
    try:
        df = load_attendance_data()
        employees = load_employees()
        today = datetime.now().strftime('%Y-%m-%d')
        
        # –ó–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_records = df[df['date'] == today]
        
        # –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ (–µ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥, –Ω–µ—Ç —É—Ö–æ–¥–∞)
        present_count = len(today_records[
            (today_records['arrival'].notna()) & 
            (today_records['arrival'] != '') & 
            ((today_records['departure'].isna()) | (today_records['departure'] == ''))
        ])
        
        return jsonify({
            'today_present': present_count,
            'total_employees': len(employees),
            'total_records': len(df),
            'today_records': len(today_records),
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return jsonify({
            'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
            'timestamp': datetime.now().isoformat()
        }), 500

# API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –±–æ—Ç–æ–º)
@app.route('/api/add_employee', methods=['POST'])
def add_employee_api():
    """API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –±–æ—Ç"""
    try:
        data = request.json
        if not data or 'serial' not in data or 'name' not in data:
            return jsonify({
                'status': 'error',
                'message': '–¢—Ä–µ–±—É—é—Ç—Å—è –ø–æ–ª—è serial –∏ name'
            }), 400
        
        serial = data['serial'].upper()
        name = data['name']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
        employees = load_employees()
        if serial in employees:
            return jsonify({
                'status': 'error',
                'message': f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –∫–∞—Ä—Ç–æ–π {serial} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            }), 409
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if save_new_employee(serial, name):
            logger.info(f"–ß–µ—Ä–µ–∑ API –¥–æ–±–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {name} ({serial})")
            return jsonify({
                'status': 'success',
                'message': f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {name} —Å –∫–∞—Ä—Ç–æ–π {serial} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω'
            })
        else:
            return jsonify({
                'status': 'error',
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'
            }), 500
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ API: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}'
        }), 500

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –°–ö–£–î (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)")
    logger.info(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    logger.info(f"–§–∞–π–ª –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: {ATTENDANCE_FILE}")
    logger.info(f"–§–∞–π–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {EMPLOYEES_FILE}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 5001 (—á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º)
    app.run(host='0.0.0.0', port=5001, debug=False)
